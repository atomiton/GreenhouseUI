"use strict";angular.module("greenhouseuiApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch","rzModule","ngMaterial","ngMessages","angular-loading-bar"]).config(["$routeProvider","cfpLoadingBarProvider",function(a,b){b.includeSpinner=!1;var c=function(a){return a.getHomePaths()};c.$inject=["TopBarService"];var d=function(a){return a.getSimulationPaths()};d.$inject=["TopBarService"],a.when("/",{redirectTo:"/home"}).when("/home",{templateUrl:"views/home.html",controller:"HomeCtrl",controllerAs:"vm",resolve:{topBarPath:c}}).when("/p2",{templateUrl:"views/p2.html",controller:"TestcontrollerCtrl",controllerAs:"vm",resolve:{topBarPath:c}}).when("/simulation/",{templateUrl:"views/simulation.html",controller:"SimulationCtrl",controllerAs:"vm",resolve:{topBarPath:d}}).when("/simulation/:greenHouseId/greenhouse",{templateUrl:"views/greenhouse.html",controller:"GreenhouseCtrl",controllerAs:"vm",resolve:{topBarPath:d}}).when("/simulation/:greenHouseId",{templateUrl:"views/simulation.html",controller:"SimulationCtrl",controllerAs:"vm",resolve:{topBarPath:d}}).when("/simulation/:greenHouseId/zone//",{redirectTo:"/simulation/:greenHouseId/zone"}).when("/simulation/:greenHouseId/zone/:zoneId",{redirectTo:"/simulation/:greenHouseId/zone/:zoneId/1"}).when("/simulation/:greenHouseId/zone",{templateUrl:"views/zones.html",controller:"ZonesCtrl",controllerAs:"vm",resolve:{topBarPath:d}}).when("/simulation/:greenHouseId/zone/:zoneId/:tabId",{templateUrl:"views/zones.html",controller:"ZonesCtrl",controllerAs:"vm",resolve:{topBarPath:d}}).when("/reports/:greenHouseId",{templateUrl:"views/reports.html",controller:"ReportsCtrl",controllerAs:"vm",resolve:{topBarPath:d}}).when("/configurator",{templateUrl:"views/configurator.html",controller:"ConfiguratorCtrl",controllerAs:"vm",resolve:{topBarPath:c}}).when("/docs",{templateUrl:"views/docs.html",controller:"DocsCtrl",controllerAs:"docs",resolve:{topBarPath:c}}).otherwise({redirectTo:"/"})}]).run(["$rootScope","$location",function(a,b){window.root=a,a.user={profile:null,hasPermission:!1},a.allData={greenhouses:[],lanes:[],selectedGreenhouseId:"",selectedZoneId:""},a.sensors={},a.sensorListOfZone={},a.$on("$routeChangeStart",function(b,c){a.loadingSpinner=!0}),a.hasSubBar=function(){return $.isEmptyObject(a.topBarPaths)?!1:a.topBarPaths.home.path==="#"+b.path()&&a.topBarPaths.home.hasSubBar},a.hasZoneSelect=function(c){if($.isEmptyObject(a.topBarPaths))return!1;var d=_.filter(a.topBarPaths.paths,function(a){return(("#"+b.path()+"/").indexOf(a.path(c))>-1||("#"+b.path()).indexOf(a.path(c))>-1)&&"undefined"!=typeof a.hasZoneSelect&&a.hasZoneSelect});return"undefined"!=typeof d&&d.length||("#"+b.path()).indexOf(a.topBarPaths.home.path)>-1&&"undefined"!=typeof a.topBarPaths.home.hasZoneSelect&&a.topBarPaths.home.hasZoneSelect},a.hasGreenHouseSelect=function(c){if($.isEmptyObject(a.topBarPaths))return!1;var d=_.filter(a.topBarPaths.paths,function(a){return("#"+b.path()).indexOf(a.path(c))>-1&&"undefined"!=typeof a.hasGreenHouseSelect&&a.hasGreenHouseSelect});return"undefined"!=typeof d&&d.length||("#"+b.path()).indexOf(a.topBarPaths.home.path())>-1&&"undefined"!=typeof a.topBarPaths.home.hasGreenHouseSelect&&a.topBarPaths.home.hasGreenHouseSelect},a.isActive=function(a){return("#"+b.path()).indexOf(a)>-1}}]),angular.module("greenhouseuiApp").service("ApiService",["$http","GeneralService","SensorService",function(a,b,c){function d(c,d,e,f){if(f)for(var g=0;g<f.length;g++)c.data=b.replaceAll(c.data,"{"+g+"}",f[g]);return a(c).then(function(a){var b=new X2JS,c=b.xml_str2json(a.data);if(d)for(var f=d.split("."),g=0;g<f.length;g++)c=c[f[g]];if("undefined"==typeof c)return[];if(angular.isArray(c)||(c=[c]),e)for(var g=0;g<c.length;g++)"undefined"!=typeof c[g]&&(c[g]=c[g][e]);return c})}function e(a,c,d){var e=new X2JS;if("object"!==$.type(a)){if(c)for(var f=0;f<c.length;f++)a=b.replaceAll(a,"{"+f+"}",c[f]);a=e.xml_str2json(a)}else{if(a=JSON.stringify(a),c)for(var f=0;f<c.length;f++)a=b.replaceAll(a,"{"+f+"}",c[f]);a=JSON.parse(a)}var g=new WebSocket(BE_URL_WS);g.onopen=function(){console.log("ws open");var b=JSON.stringify(a);g.send(b)},g.onmessage=function(a){var b=a.data;console.log(b);var c=e.xml_str2json(b);d&&d(c)},g.onerror=function(a){console.log("Error detected: "+a)},g.onclose=function(){console.log("ws close")}}var f=BE_URL,g=BE_TQL_URL,h=BE_API,i=this;i.apiCall=d,i.getAllGreenHouses=function(){var a={method:"POST",url:f,data:h.GREEN_HOUSE.FIND_ALL};return d(a,h.GREEN_HOUSE.FIND_ALL_RESULT,h.GREEN_HOUSE.OBJECT)},i.getHeaterOfGreenhouse=function(a){var b={method:"POST",url:f,data:h.GREEN_HOUSE.FIND_HEATER};return d(b,h.GREEN_HOUSE.FIND_HEATER_RESULT,h.GREEN_HOUSE.FIND_HEATER_OBJECT,[a])},i.getIrrigationOfGreenhouse=function(a){var b={method:"POST",url:f,data:h.GREEN_HOUSE.FIND_IRRIGATION};return d(b,h.GREEN_HOUSE.FIND_IRRIGATION_RESULT,h.GREEN_HOUSE.FIND_IRRIGATION_OBJECT,[a])},i.getLaneOfGreenHouse=function(a){var b={method:"POST",url:f,data:h.LANE.FIND_BY_GREENHOUSE};return d(b,h.LANE.FIND_BY_GREENHOUSE_RESULT,h.LANE.OBJECT,[a])},i.getZoneOfLane=function(a){var b={method:"POST",url:f,data:h.ZONE.FIND_BY_LANE};return d(b,h.ZONE.FIND_BY_LANE_RESULT,h.ZONE.OBJECT,[a])},i.getSensorOfGrid=function(a){var b={method:"POST",url:f,data:h.SENSOR.FIND_SENSOR_BY_GRID};return d(b,h.SIMPLE_RESULT,null,[a])},i.getLightOfGrid=function(a){var b={method:"POST",url:f,data:h.SENSOR.FIND_LIGHT_BY_GRID};return d(b,h.SIMPLE_RESULT,h.SENSOR.OBJECT_LIGHT_BY_GRID,[a])},i.getAmbientLightOfGrid=function(a){var b={method:"POST",url:f,data:h.SENSOR.FIND_AMBIENT_LIGHT_BY_GRID};return d(b,h.SIMPLE_RESULT,h.SENSOR.OBJECT_AMBIENT_LIGHT_BY_GRID,[a])},i.getSoilOfGrid=function(a){var b={method:"POST",url:f,data:h.SENSOR.FIND_SOIL_BY_GRID};return d(b,h.SIMPLE_RESULT,h.SENSOR.OBJECT_SOIL_BY_GRID,[a])},i.getGridOfZone=function(a){var b={method:"POST",url:f,data:h.GRID.FIND_BY_ZONE};return d(b,h.GRID.FIND_BY_ZONE_RESULT,h.GRID.OBJECT,[a])},i.getZone=function(a){var b={method:"POST",url:f,data:h.ZONE.FIND};return d(b,h.SIMPLE_RESULT,h.ZONE.OBJECT,[a])},i.getZoneOfGreenHouse=function(a){var b={method:"POST",url:f,data:h.ZONE.FIND_BY_GREEN_HOUSE};return d(b,h.ZONE.FIND_BY_GREEN_HOUSE_RESULT,null,[a])},i.getHeaterOfZone=function(a){var b={method:"POST",url:f,data:h.ZONE.FIND_HEATER};return d(b,h.ZONE.FIND_HEATER_RESULT,null,[a])},i.getIrrigationOfZone=function(a){var b={method:"POST",url:f,data:h.ZONE.FIND_IRRIGATION_BY_ZONE};return d(b,h.ZONE.FIND_IRRIGATION_BY_ZONE_RESULT,null,[a])},i.getIrrigationOfZoneArray=function(a){for(var c='<Query><Find format="All">',e=0;e<a.length;e++){var g=angular.copy(h.ZONE.FIND_IRRIGATION_BY_ZONE);g=b.replaceAll(g,'<Query><Find format="All">',""),g=b.replaceAll(g,"</Find></Query>",""),c+=b.replaceAll(g,"{0}",a[e])}c+="</Find></Query>";var i={method:"POST",url:f,data:c};return d(i,h.SIMPLE_RESULT,h.ZONE.FIND_IRRIGATION_OBJECT).then(function(a){return a[0]})},i.getHeaterOfZoneArray=function(a){for(var c='<Query><Find format="All">',e=0;e<a.length;e++){var g=angular.copy(h.ZONE.FIND_HEATER);g=b.replaceAll(g,"<Find>",""),g=b.replaceAll(g,"</Find>",""),c+=b.replaceAll(g,"{0}",a[e])}c+="</Find></Query>";var i={method:"POST",url:f,data:c};return d(i,h.SIMPLE_RESULT,h.ZONE.FIND_HEATER_OBJECT).then(function(a){return a[0]})},i.controlHeaterOfZone=function(a){var b={method:"POST",url:f,data:h.ZONE.CONTROL_HEATER};return d(b,null,null,a)},i.controlIrrigationOfZone=function(a){var b={method:"POST",url:f,data:h.ZONE.CONTROL_IRRIGATION};return d(b,null,null,a)},i.getAllLightOfZone=function(a){var b={method:"POST",url:f,data:h.ZONE.FIND_LIGHT_BY_ALL_GRID};return d(b,h.ZONE.FIND_LIGHT_BY_ALL_GRID_RESULT,h.ZONE.FIND_LIGHT_BY_ALL_GRID_OBJECT,a)},i.getAllZones=function(){var a={method:"POST",url:f,data:h.ZONE.FIND_ALL};return d(a,h.ZONE.FIND_ALL_RESULT,h.ZONE.OBJECT)},i.getZoneSensor=function(a){var b={method:"POST",url:f,data:h.SENSOR.FIND_ALL_IN_ZONE};return d(b,h.SENSOR.FIND_ALL_IN_ZONE_RESULT,null,[a])},i.getExtTemperatureSensor=function(){var a={method:"POST",url:f,data:h.SENSOR.EXT_TEMPERATURE};return d(a,h.SENSOR.EXT_TEMPERATURE_RESULT)},i.getExtHumiditySensor=function(){var a={method:"POST",url:f,data:h.SENSOR.EXT_HUMIDITY};return d(a,h.SENSOR.EXT_HUMIDITY_RESULT)},i.startSimulation=function(a){var b={method:"POST",url:f,data:h.SIMULATION.START};return d(b,null,null,[a])},i.stopSimulation=function(a){var b={method:"POST",url:f,data:h.SIMULATION.STOP};return d(b,null,null,[a])},i.getProfile=function(a){var b={method:"POST",url:g+a,data:h.USER.PROFILE};return d(b,h.SIMPLE_RESULT,h.USER.PROFILE_RESULT,[a])},i.createGreenHouse=function(a){var b={method:"POST",url:f,data:a};return d(b)},i.beginSubscriptionWS=function(a){return e(BE_API.WS.SUBSCRIPTION_JSON,null,a)},i.beginSubscriptionAvgTemp=function(a,b){var c={method:"POST",url:f,data:h.REPORT.AVG_TEMPERATURE};return d(c,h.SIMPLE_RESULT,h.REPORT.AVG_TEMPERATURE_OBJECT,[a])},i.beginSubscriptionAvgHumidity=function(a,b){var c={method:"POST",url:f,data:h.REPORT.AVG_HUMIDITY};return d(c,h.SIMPLE_RESULT,h.REPORT.AVG_HUMIDITY_OBJECT,[a])}}]),angular.module("greenhouseuiApp").controller("HomeCtrl",["$location",function(a){}]),angular.module("greenhouseuiApp").directive("navBarTop",["$timeout","$rootScope","$route","$routeParams","$q","$location","ApiService","GeneralService","TopBarService","SensorService","TestService",function(a,b,c,d,e,f,g,h,i,j,k){return{templateUrl:"./scripts/directives/navbar/navbar.html",restrict:"E",link:function(k,l,m){k.params={},k.$watch(function(){return b.allData.selectedGreenhouseId},function(a,b){a!==b&&c.updateParams({greenHouseId:a,zoneId:null,tabId:null})}),k.$watch(function(){return b.allData.selectedZoneId},function(a,b){a!==b&&c.updateParams({zoneId:a})}),k.ctrl={load:function(c){b.hasGreenHouseSelect(c)&&(b.allData.greenhouses=[],g.getAllGreenHouses().then(function(d){return b.allData.greenhouses=d,b.allData.greenhouses=_.sortBy(b.allData.greenhouses,["GreenhouseName"]),angular.forEach(b.allData.greenhouses,function(a){a.onChange=function(b){"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.Humidity"]&&(a.InternalEnv.Humidity=b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.Humidity"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.Light"]&&(a.InternalEnv.Light=b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.Light"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.SoilMoisture"]&&(a.InternalEnv.SoilMoisture=b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.SoilMoisture"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.Temperature"]&&(a.InternalEnv.Temperature=b["GatewayModels.GatewayThings.Greenhouse.InternalEnv.Temperature"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Temperature"]&&(a.ExternalEnv.Temperature=b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Temperature"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Light"]&&(a.ExternalEnv.Light=b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Light"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Humidity"]&&(a.ExternalEnv.Humidity=b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Humidity"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.SoilMoisture"]&&(a.ExternalEnv.SoilMoisture=b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.SoilMoisture"]._Value),"undefined"!=typeof b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Wind"]&&(a.ExternalEnv.Wind=b["GatewayModels.GatewayThings.Greenhouse.ExternalEnv.Wind"]._Value)},j.updateSensor(a.GreenhouseID,a)}),$.isEmptyObject(c)||$.isEmptyObject(c.greenHouseId)?(b.allData.greenhouses.length?i.getGreenHousePath(c).indexOf("#"+f.path())>-1&&f.url("/simulation/"+b.allData.greenhouses[0].GreenhouseID):h.simpleAlert("No green house data"),!1):(b.allData.selectedGreenhouseId=c.greenHouseId,a(function(){h.triggerSelect()},0),!0)}).then(function(d){d&&g.getLaneOfGreenHouse(c.greenHouseId).then(function(d){b.allData.lanes=d,b.allData.lanes=_.sortBy(b.allData.lanes,["LaneName"]);var l=b.allData.lanes.map(function(a){return g.getZoneOfLane(a.LaneID).then(function(b){a.zones=b,a.zones=_.sortBy(a.zones,function(a){return parseInt(h.toBin(a.ZoneName),2)});for(var c=[],d=0;d<a.zones.length;d++)c.push(a.zones[d].ZoneID);g.getIrrigationOfZoneArray(c).then(function(b){angular.forEach(b,function(b){var c=_.find(a.zones,{ZoneID:b.ZoneID._Value});c.Irrigation=b,b.onChange=function(a){"undefined"!=typeof a["GatewayModels.GatewayThings.IrrigationMotor.OnOffState"]?c.Irrigation.OnOffState=a["GatewayModels.GatewayThings.IrrigationMotor.OnOffState"]._Value:"undefined"!=typeof a.OnOffState&&(c.Irrigation.OnOffState=a.OnOffState._Value)},j.updateSensor(b.IrrigationMotorID,b)})}),g.getHeaterOfZoneArray(c).then(function(b){angular.forEach(b,function(b){var c=_.find(a.zones,{ZoneID:b.ZoneID._Value});c.Heater=b,b.onChange=function(a){"undefined"!=typeof a["GatewayModels.GatewayThings.Heater.OnOffState"]?c.Heater.OnOffState=a["GatewayModels.GatewayThings.Heater.OnOffState"]._Value:"undefined"!=typeof a.OnOffState&&(c.Heater.OnOffState=a.OnOffState._Value)},j.updateSensor(b.HeaterID,b)})})})});e.all(l).then(function(){if(a(function(){h.triggerSelect()},0),b.hasZoneSelect(c)){if($.isEmptyObject(c)||$.isEmptyObject(c.zoneId)){if(b.allData.lanes.length){if(i.getZonePath(c).indexOf("#"+f.path())>-1){var d=_.find(b.allData.lanes,function(a){return"undefined"!=typeof a.zones&&a.zones.length?a:void 0});"undefined"!=typeof d?f.url("/simulation/"+c.greenHouseId+"/zone/"+d.zones[0].ZoneID):h.simpleAlert("No zone data")}}else h.simpleAlert("No lane data");return}b.allData.selectedZoneId=c.zoneId,k.ctrl.load_sensor(b.allData.selectedZoneId),a(function(){h.triggerSelect()},0)}})})}))},load_sensor:function(a){g.getZoneSensor(a).then(function(a){b.$broadcast("zone-sensor-list-change",a[0])})},load_profile:function(a){var c=a.sstk||sessionStorage.token||null;c&&(sessionStorage.token=c,f.search("sstk",null),g.getProfile(c).then(function(a){b.user.hasPermission=!1,a.length&&"undefined"!=typeof a[0]?(b.user.profile=a[0],CONFIG_CONSTANT.ADMIN_USER.indexOf(b.user.profile.UserName)>-1&&(b.user.hasPermission=!0)):sessionStorage.clear()}))}},b.$on("$routeChangeSuccess",function(b,c){k.params=d,a(function(){k.ctrl.load_profile(d),k.ctrl.load(d)},100)}),a(function(){k.ctrl.load_profile(d),k.ctrl.load(d),g.beginSubscriptionWS(function(a){var b=null;a&&"undefined"!=typeof a.TqlNotification&&"undefined"!=typeof a.TqlNotification.Update&&(b=a.TqlNotification.Update),angular.forEach(b,function(a,b){a.id=b,j.onUpdate(b,a)})})},100)}}}]),angular.module("greenhouseuiApp").controller("DashboardCtrl",function(){}),angular.module("greenhouseuiApp").controller("TestcontrollerCtrl",function(){var a=this;a.slider={value:1,options:{floor:1,ceil:3,showSelectionBarFromValue:0,translate:function(a,b,c){return"0"+a}}}}),angular.module("greenhouseuiApp").service("TopBarService",["$rootScope","$routeParams","$timeout",function(a,b,c){var d=this,e=[{title:"Home",path:"/"}];a.$on("$routeChangeSuccess",function(){c(function(){},0)}),d.getGreenHousePath=function(a){var b="undefined"!=typeof a&&"undefined"!=typeof a.greenHouseId?a.greenHouseId:"";return"#/simulation/"+b+"/greenhouse"},d.getReportPath=function(a){var b="undefined"!=typeof a&&"undefined"!=typeof a.greenHouseId?a.greenHouseId:"";return"#/reports/"+b},d.getZonePath=function(a){var b="undefined"!=typeof a&&"undefined"!=typeof a.greenHouseId?a.greenHouseId:"",c="undefined"!=typeof a&&"undefined"!=typeof a.zoneId?a.zoneId:"";return"#/simulation/"+b+"/zone/"+c},d.getHomePaths=function(){var b={home:{title:"Home",path:function(){return"#/home"}},paths:[{title:"Home",path:function(){return"#/home"}},{title:"Configurator",path:function(){return"#/configurator"}},{title:"Docs",path:function(){return"#/docs"}}]}||e;return a.topBarPaths=b,b},d.getSimulationPaths=function(){var b={home:{title:"Home",path:function(){return"#/simulation"},hasGreenHouseSelect:!0},paths:[{title:"Greenhouse",path:d.getGreenHousePath,hasGreenHouseSelect:!0},{title:"Zones/Plants",path:d.getZonePath,hasZoneSelect:!0,hasGreenHouseSelect:!0},{title:"Reports",path:d.getReportPath,hasGreenHouseSelect:!0}]}||e;return a.topBarPaths=b,b}}]),angular.module("greenhouseuiApp").controller("GreenhouseCtrl",["$scope","$rootScope","$timeout","$routeParams","$location","StatusService","ApiService","GeneralService",function(a,b,c,d,e,f,g,h){var i=this;i.GeneralService=h,i.heatCount=[1,2,3,4,5,6,7,8,9],i.scale_groups=CONFIG_CONSTANT.HEAT_MAP_SCALE,i.selectedHeatMap=Object.keys(i.scale_groups)[1],i.ctrl={reloadZone:function(a,b){a[b].sensors={heater:{OnOffState:"on"}}},loadZones:function(a){i.lanes=[],g.getLaneOfGreenHouse(a).then(function(a){a.length&&angular.forEach(a,function(a){g.getZoneOfLane(a.LaneID).then(function(b){a.zones=b,i.lanes.push(a),console.log(b)})})})},generateBackgroundCode:function(){if(b.allData.lanes.length){var a=b.allData.lanes;angular.forEach(a,function(a){angular.forEach(a.zones,function(a){function b(a,b){for(var c=Math.min.apply(null,b),d=0;d<b.length;d++)c<=b[d]&&b[d]<a&&(c=b[d]);return c}var c=0,d=i.scale_groups[i.selectedHeatMap].data;switch(i.selectedHeatMap){case"VPD":c=a.VPD||0;break;case"Temperature":c=a.ZoneTemperature||0;break;case"Humidity":c=a.ZoneHumidity;break;case"Average soil moisture":c=a.ZoneAvgSM;break;case"Average ambient light":c=a.ZoneAvgLight}a.backgroundCode=1,a.backgroundCode=d.indexOf(b(c,d))+1+("Temperature"===i.selectedHeatMap?1:0)})}),c(function(){b.loadingSpinner=!1},1e3)}},goToGreenHouse:function(a,b){e.url("/simulation/"+a.GreenhouseID+"/zone/"+b.ZoneID)}},a.$watch(function(){return i.selectedHeatMap},function(a,b){i.ctrl.generateBackgroundCode()}),a.$watch(function(){return b.allData},function(a,b){if("undefined"!=typeof a.selectedGreenhouseId&&a.selectedGreenhouseId){var c=_.find(a.greenhouses,{GreenhouseID:a.selectedGreenhouseId});"undefined"!=typeof c&&(c.lanes=a.lanes,i.external=f.generateExternalStatus(c),i.internal=f.generateInternalStatus(c)),i.ctrl.generateBackgroundCode()}},!0),c(function(){h.triggerFullHeight()},500)}]),angular.module("greenhouseuiApp").controller("SimulationCtrl",["$scope","$routeParams","$rootScope","$location","GeneralService","$timeout","TopBarService","StatusService",function(a,b,c,d,e,f,g,h){a.$location=d,window.simulation=a;var i=this;a.$watch(function(){return c.allData},function(a,b){if("undefined"!=typeof a.selectedGreenhouseId&&a.selectedGreenhouseId){var d=_.find(c.allData.greenhouses,{GreenhouseID:a.selectedGreenhouseId});"undefined"!=typeof d&&(d.lanes=a.lanes,i.external=h.generateExternalStatus(d),i.internal=h.generateInternalStatus(d))}},!0),i.goToGreenHouse=function(){d.url(g.getGreenHousePath(b).replace("#",""))},i.greenHouse={},f(function(){e.triggerFullHeight()},0)}]),angular.module("greenhouseuiApp").service("GeneralService",["$rootScope","$mdToast",function(a,b){function c(a){return a.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")}var d=this;d.triggerAll=function(){d.triggerFullHeight(),d.triggerSelect()},d.triggerSelect=function(){$(".selectpicker").selectpicker("refresh")},d.triggerFullHeight=function(){$("#panel-full-height").height($(window).height()-$(".navbar-wrapper").height()-parseInt($("body").css("padding-top").replace("px",""))).find(">.panel-body").outerHeight($("#panel-full-height").height()-$("#panel-full-height .panel-heading").outerHeight()-2),$(window).on("resize",function(){$("#panel-full-height").height($(window).height()-$(".navbar-wrapper").height()-parseInt($("body").css("padding-top").replace("px",""))).find(">.panel-body").outerHeight($("#panel-full-height").height()-$("#panel-full-height .panel-heading").outerHeight()-2)})},d.checkPermission=function(){return a.user.hasPermission?!0:(d.simpleAlert("You have no permission!"),!1)},d.isEmpty=function(a){return"undefined"!=typeof a&&null!==a},d.simpleAlert=function(a){b.show(b.simple().textContent(a).position("bottom right").hideDelay(3e3))},d.replaceAll=function(a,b,d){return a.replace(new RegExp(c(b),"g"),d)},d.toBin=function(a){var b,c,d,e=[],f=a.length;for(b=1;f>=b;b++)for(d=a.charCodeAt(f-b),c=0;8>c;c++)e.push(d%2),d=Math.floor(d/2);return e.reverse().join("")}}]),angular.module("greenhouseuiApp").directive("selectOnClick",["$window",function(a){return{restrict:"A",link:function(b,c,d){c.on("click",function(){a.getSelection().toString()||this.setSelectionRange(0,this.value.length)})}}}]),angular.module("greenhouseuiApp").controller("ZonesCtrl",["$scope","$rootScope","$location","$route","$q","$routeParams","$timeout","ApiService","FlickrService","$filter","ChartService","GeneralService","SensorService",function(a,b,c,d,e,f,g,h,i,j,k,l,m){window.zone=a;var n=this;n.zone={name:"",location:{},devices:{summary:[],groups:[{name:"Plantation",title:"crop type",location:"N/A",isCollapsed:!0,data:[{name:"Seeding date",description:""},{name:"# of plants",description:""},{name:"Last fertilisation",description:""},{name:"Harvesting season",description:""}]},{name:"VPD",title:"N/A",location:"N/A",isCollapsed:!0,data:[{name:"Temperature",description:""},{name:"Humidity",description:""},{name:"Heater",description:""},{name:"Heating level",description:""}]},{name:"Lighting",title:"7 lights on",location:"N/A",isCollapsed:!0,data:[{name:"Avg. Lux",description:""},{name:"Lights on",description:""},{name:"Lights off",description:""}]},{name:"Irrigation",title:"controller on/off",location:"N/A",isCollapsed:!0,status:null,data:[{name:"Avg. soil moisture",description:""},{name:"Nozzles",description:""},{name:"Nozzle flow rate",description:""},{name:"Controller",description:"on, since 8:15 am"}]}]}},n.grids=[],n.ctrl={generateZone:function(a){n.zone.location=a.Location,n.zone.devices.groups[0].location=n.zone.devices.groups[1].location=n.zone.devices.groups[2].location=n.zone.devices.groups[3].location="Lng: "+j("number")(a.Location.longitude,2)+" Lat: "+j("number")(a.Location.latitude,2),n.zone.name=a.ZoneName,n.zone.cropType=a.CropType,n.zone.devices.groups[0].title=a.CropType,n.zone.devices.groups[0].data=[{name:"Seeding date",description:a.SeedingDate},{name:"# of plants",description:a.NoOfPlants},{name:"Last fertilisation",description:a.LastFertilisationDate},{name:"Harvesting season",description:a.HarvestingSeason}],n.zone.devices.groups[1].data=[{name:"Temperature",description:a.ZoneTemperature},{name:"Humidity",description:a.ZoneHumidity},{name:"Heater",description:0},{name:"Heating level",description:0}],n.zone.devices.groups[2].data=[{name:"Avg. Lux",description:a.ZoneAvgLight},{name:"Lights on",description:""},{name:"Lights off",description:""}],n.zone.devices.groups[3].data=[{name:"Avg. soil moisture",description:a.ZoneAvgSM},{name:"Nozzles",description:"9"},{name:"Nozzle flow rate",description:""},{name:"Controller",description:""}]},collapseDeviceGroup:function(a){d.updateParams({tabId:n.zone.devices.groups.indexOf(a)+1})},changeDeviceGroup:function(a){switch(n.ctrl.changeDeviceGroupSummary(n.zone.devices.groups[a-1]),a){case 1:g(function(){n.ctrl.generateGrids().then(function(){n.zone.imageUrl||i.findImageByTag(n.zone.cropType).then(function(a){n.zone.imageUrl=a})})},1e3);break;case 2:g(function(){n.ctrl.generateGrids().then(function(){n.chart.generate(),n.ctrl.getHeater()})});break;case 3:g(function(){n.ctrl.generateGrids().then(function(){n.ctrl.getLights()})});break;case 4:n.ctrl.generateGrids().then(function(){n.ctrl.getIrrigation()})}},generateGrids:function(){return n.grids=[0,1,2,3,4,5,6,7,8],f.zoneId?h.getGridOfZone(f.zoneId).then(function(a){n.grids=a;var c=n.grids.map(function(a){return h.getSensorOfGrid(a.GridID).then(function(b){if(b.length){a.sensors={};var c=b[0].LightModel;c.onChange=function(b){a.sensors.light=b},m.updateSensor(c.LightID,c);var c=b[0].AmbientLightSensorModel;c.onChange=function(b){a.sensors.ambient_light=b},m.updateSensor(c.AmbientLightID,c);var c=b[0].SoilSensorModel;c.onChange=function(b){a.sensors.soil=b},m.updateSensor(c.SoilSensorID,c)}})});return e.all(c).then(function(){g(function(){if("undefined"!=typeof b.sensorListOfZone){$.extend(b.sensorListOfZone,{"Ambient sensor":{data:null,count:0,icon_class:"icon-sensor",circle_class:"bg-color-red"},Lights:{data:null,count:0,icon_class:"icon-light",circle_class:"bg-color-blue-1"},"Soil moisure sensor":{data:null,count:0,icon_class:"icon-soil",circle_class:"bg-color-yellow"}});for(var a=0;a<n.grids.length;a++){var c=n.grids[a];"undefined"!=typeof c.sensors.light&&b.sensorListOfZone["Ambient sensor"].count++,"undefined"!=typeof c.sensors.ambient_light&&b.sensorListOfZone.Lights.count++,"undefined"!=typeof c.sensors.soil&&b.sensorListOfZone["Soil moisure sensor"].count++}}},500)})}):e(function(a){a()})},getHeater:function(){f.zoneId&&h.getHeaterOfZone(f.zoneId).then(function(a){var b=a[0];b.onChange=function(a){var b=_.find(n.zone.devices.groups[1].data,{name:"Heater"}),c=_.find(n.zone.devices.groups[1].data,{name:"Heating level"});"undefined"!=typeof a["GatewayModels.GatewayThings.Heater.OnOffState"]?b.description=a["GatewayModels.GatewayThings.Heater.OnOffState"]._Value:"undefined"!=typeof a.OnOffState&&(b.description=a.OnOffState),"undefined"!=typeof a["GatewayModels.GatewayThings.Heater.HeatingLevel"]?c.description=parseInt(a["GatewayModels.GatewayThings.Heater.HeatingLevel"]._Value):"undefined"!=typeof a.HeatingLevel&&(c.description=a.HeatingLevel),n.slider.value=c.description},m.updateSensor(b.HeaterID,b)})},getLights:function(){if(9===n.grids.length){for(var a=[],b=0;b<n.grids.length;b++)a.push(n.grids[b].GridID);h.getAllLightOfZone(a).then(function(a){console.log(a);var b=_.find(n.zone.devices.groups[2].data,{name:"Lights on"}),c=_.find(n.zone.devices.groups[2].data,{name:"Lights off"});b.description=0,c.description=0;for(var d=0;d<a[0].length;d++)"ON"===a[0][d].OnOffState.toUpperCase()?b.description++:c.description++;n.zone.devices.groups[2].title=b.description+" light(s) on"})}},getIrrigation:function(){f.zoneId&&h.getIrrigationOfZone(f.zoneId).then(function(a){var b=a[0];console.log(b),b.onChange=function(a){var b=_.find(n.zone.devices.groups[3].data,{name:"Controller"});"undefined"!=typeof a["GatewayModels.GatewayThings.IrrigationMotor.OnOffState"]?n.zone.devices.groups[3].status=a["GatewayModels.GatewayThings.IrrigationMotor.OnOffState"]._Value:n.zone.devices.groups[3].status=a.OnOffState._Value,b.description=n.zone.devices.groups[3].status+", since "+j("date")(a.OnOffState._Timestamp,"short"),n.zone.devices.groups[3].title="controller "+n.zone.devices.groups[3].status},m.updateSensor(b.IrrigationMotorID,b)})},controlHeater:function(a,b){if(f.zoneId){var c=_.find(n.zone.devices.groups[1].data,{name:"Heater"}),d=_.find(n.zone.devices.groups[1].data,{name:"Heating level"}).description;c.description=a?"On"===c.description?"Off":"On":c.description,d=b?b:d;var e=[f.zoneId,c.description,d];h.controlHeaterOfZone(e).then(function(){"On"===c.description?l.simpleAlert("Heater turned on!"):l.simpleAlert("Heater turned off!")})}},controlIrrigation:function(a){if(f.zoneId){var b=n.zone.devices.groups[3].status;b=a?"On"===b?"Off":"On":b;var c=[f.zoneId,b];h.controlIrrigationOfZone(c).then(function(){"On"===b?l.simpleAlert("Irrigation turned on!"):l.simpleAlert("Irrigation turned off!"),n.zone.devices.groups[3].status=b})}},changeDeviceGroupSummary:function(a){angular.forEach(n.zone.devices.groups,function(b,c){b!==a?b.isCollapsed=!0:a.isCollapsed=!1})},generateZoneSensor:function(a){var c={"Temperature sensor":{data:$.isEmptyObject(a)||$.isEmptyObject(a.TempSensor)?{}:a.TempSensor,count:0,icon_class:"icon-temp",circle_class:"bg-color-blue"},Camera:{data:$.isEmptyObject(a)||$.isEmptyObject(a.Camera)?{}:a.Camera,count:0,icon_class:"icon-camera",circle_class:"bg-color-purple"},"Heater sensor":{data:$.isEmptyObject(a)||$.isEmptyObject(a.Heater)?{}:a.Heater,count:0,icon_class:"icon-heater",circle_class:"bg-color-green-1"},"Humidity sensor":{data:$.isEmptyObject(a)||$.isEmptyObject(a.HumiditySensor)?{}:a.HumiditySensor,count:0,icon_class:"icon-humid",circle_class:"bg-color-green"},"Irrigation controller":{data:$.isEmptyObject(a)||$.isEmptyObject(a.IrrigationMotor)?{}:a.IrrigationMotor,count:0,icon_class:"icon-irrigation",circle_class:"bg-color-orange"}};for(var d in c)c[d].count=$.isEmptyObject(c[d].data)?0:1,b.sensorListOfZone[d]=c[d]},loadZoneData:function(){var a=_.find(b.allData.lanes,function(a){var b=_.find(a.zones,{ZoneID:f.zoneId});return"undefined"!=typeof b?b:void 0});if("undefined"!=typeof a){var c=_.find(a.zones,{ZoneID:f.zoneId});n.ctrl.generateZone(c)}},generate3D:function(){function a(a){for(var c=0,d=a.length;d>c;c++)if("undefined"!=typeof b.style[a[c]])return a[c]}var b=document.createElement("div"),c="transform WebkitTransform MozTransform OTransform msTransform".split(" "),d=a(c),e="transitionDuration WebkitTransitionDuration MozTransitionDuration OTransitionDuration msTransitionDuration".split(" "),f=a(e),g={start:{}},h=void 0!==document.ontouchmove,i={x:-10,y:20,el:$(".cube")[0],move:function(a){a&&("number"==typeof a.x&&(this.x=a.x),"number"==typeof a.y&&(this.y=a.y)),this.el.style[d]="rotateX("+this.x+"deg) rotateY("+this.y+"deg)"},reset:function(){this.move({x:0,y:0})}};i.duration=function(){var a=h?50:500;return i.el.style[f]=a+"ms",a}(),$(document).keydown(function(a){switch(a.keyCode){case 37:i.move({y:i.y-90});break;case 38:a.preventDefault(),i.move({x:i.x+90});break;case 39:i.move({y:i.y+90});break;case 40:a.preventDefault(),i.move({x:i.x-90});break;case 27:i.reset()}}).bind("mousedown touchstart",function(a){return delete g.last,$(a.target).is("a, iframe")?!0:(a.originalEvent.touches?a=a.originalEvent.touches[0]:null,g.start.x=a.pageX,g.start.y=a.pageY,$(document).bind("mousemove touchmove",function(a){h&&a.originalEvent&&a.originalEvent.touches.length>1||(a.preventDefault(),a.originalEvent.touches?a=a.originalEvent.touches[0]:null,$(".viewport").trigger("move-viewport",{x:a.pageX,y:a.pageY}))}),void $(document).bind("mouseup touchend",function(){$(document).unbind("mousemove touchmove")}))}),$(".viewport").bind("move-viewport",function(a,b){function c(a,b){return a>=b}var d=h?4:1;g.last?(c(g.start.x,g.last.x)!=c(g.last.x,b.x)&&(g.start.x=g.last.x),c(g.start.y,g.last.y)!=c(g.last.y,b.y)&&(g.start.y=g.last.y)):g.last=g.start,i.move({x:i.x+parseInt((g.start.y-b.y)/d),y:i.y-parseInt((g.start.x-b.x)/d)}),g.last.x=b.x,g.last.y=b.y})}},n.slider={value:1,options:{floor:1,ceil:3,showSelectionBarFromValue:0,translate:function(a,b,c){return"0"+a},onChange:function(a,b,c){n.ctrl.controlHeater(null,b)}}},n.chart={generate:function(){k.generateLineChart("chart_lines",[])}},a.$on("zone-sensor-list-change",function(a,b){n.ctrl.generateZoneSensor(b)}),a.$watch(function(){return f},function(a,b){a&&(a.tabId&&(a.tabId===b.tabId&&g(function(){$("#groupCollapse"+(a.tabId-1)).addClass("in")}),n.ctrl.changeDeviceGroup(parseInt(a.tabId))),n.ctrl.loadZoneData())},!0),g(function(){n.ctrl.generate3D()})}]),angular.module("greenhouseuiApp").controller("ReportsCtrl",["$scope","$timeout","$q","$routeParams","$rootScope","StatusService","ChartService","ApiService","TestService",function(a,b,c,d,e,f,g,h,i){var j=this;window.report=j,j.irrigation_heater={irrigation:{on:0,off:0,data:[]},heaters:{on:0,off:0,data:[]}},j.ambientLight={allData:[],data:[],lanes:[]},j.soilMoisture={allData:[],data:[],lanes:[]},j.avgTemp={data:[]},j.avgHumidity={data:[]},j.ctrl={generate_chart:function(){j.ctrl.get_irrigation_heating(),i.generateGraphData().then(function(a){j.ctrl.generate_chart_energy(a.Energy)}),j.ctrl.start_avg_temp_subscription(),j.ctrl.start_avg_humidity_subscription()},start_avg_temp_subscription:function(){return h.beginSubscriptionAvgTemp(d.greenHouseId).then(function(a){for(var b=[],c=0;c<a.length;c++)b.push([new Date(parseInt(a[c].CurrentTemp._Timestamp)),parseFloat(a[c].CurrentTemp._Value)]);b=_.sortBy(b,function(a){
return a[0]});var d=new Date(b[b.length-1]);b=_.filter(b,function(a){return d-new Date(a[0])<36e5}),b.unshift(["Date time","Temperature"]),j.avgTemp.data=b})},start_avg_humidity_subscription:function(){return h.beginSubscriptionAvgHumidity(d.greenHouseId).then(function(a){for(var b=[],c=0;c<a.length;c++)b.push([new Date(parseInt(a[c].CurrentHumidity._Timestamp)),parseFloat(a[c].CurrentHumidity._Value)]);b=_.sortBy(b,function(a){return a[0]});var d=new Date(b[b.length-1]);b=_.filter(b,function(a){return d-new Date(a[0])<36e5}),b.unshift(["Date time","Humidity"]),j.avgHumidity.data=b})},generate_chart_temperature:function(a){g.generateLineChart("chart_temperature",a)},generate_chart_humidity:function(a){g.generateLineChart("chart_humidity",a,{series:[{color:CONFIG_CONSTANT.COLOR.BLUE_LIGHT}]})},generate_chart_energy:function(a){g.generateBarChart("chart_energy",a,{series:[{color:CONFIG_CONSTANT.COLOR.BLUE}]})},generate_chart_soil:function(a){$("#chart_soil").height(500),g.generateColumnChart("chart_soil",a,{series:[{color:CONFIG_CONSTANT.COLOR.GRAY}]})},generate_chart_irrigation_heating:function(a,b){g.generatePieChart("chart_irrigation",a),g.generatePieChart("chart_heater",b,{colors:[CONFIG_CONSTANT.COLOR.ORANGE,CONFIG_CONSTANT.COLOR.BLUE]})},generate_chart_ambient:function(a){$("#chart_ambient").height(500),g.generateColumnChart("chart_ambient",a,{series:[{color:CONFIG_CONSTANT.COLOR.GREEN}]})},get_irrigation_heating:function(){"undefined"!=typeof d.greenHouseId&&(h.getHeaterOfGreenhouse(d.greenHouseId).then(function(a){j.irrigation_heater.heaters={on:0,off:0,data:[]},angular.forEach(a[0],function(a){"ON"===a.OnOffState.toUpperCase()?j.irrigation_heater.heaters.on++:j.irrigation_heater.heaters.off++})}),h.getIrrigationOfGreenhouse(d.greenHouseId).then(function(a){j.irrigation_heater.irrigation={on:0,off:0,data:[]},angular.forEach(a[0],function(a){"ON"===a.OnOffState.toUpperCase()?j.irrigation_heater.irrigation.on++:j.irrigation_heater.irrigation.off++})}))}},j.fn={changeLane_ambient:function(a){var b=_.find(j.ambientLight.lanes,function(b){return b.LaneID===a.LaneID});"undefined"==typeof b?j.ambientLight.lanes.push(a):j.ambientLight.lanes.splice(j.ambientLight.lanes.indexOf(b),1),j.ambientLight.data=_.filter(j.ambientLight.allData,function(a){for(var b=0;b<j.ambientLight.lanes.length;b++)if(a[0].indexOf(j.ambientLight.lanes[b].LaneName)>=0)return!0;return"Zone"===a[0]||""===a[0]}),j.ctrl.generate_chart_ambient(j.ambientLight.data)},changeLane_soil:function(a){var b=_.find(j.soilMoisture.lanes,function(b){return b.LaneID===a.LaneID});"undefined"==typeof b?j.soilMoisture.lanes.push(a):j.soilMoisture.lanes.splice(j.soilMoisture.lanes.indexOf(b),1),j.soilMoisture.data=_.filter(j.soilMoisture.allData,function(a){for(var b=0;b<j.soilMoisture.lanes.length;b++)if(a[0].indexOf(j.soilMoisture.lanes[b].LaneName)>=0)return!0;return"Zone"===a[0]||""===a[0]}),j.ctrl.generate_chart_soil(j.soilMoisture.data)}},a.$watch(function(){return j.irrigation_heater},function(a,b){typeof a!==b&&(j.irrigation_heater.heaters.data=[["Status","Count"],["Heater On",j.irrigation_heater.heaters.on],["Heater Off",j.irrigation_heater.heaters.off]],j.irrigation_heater.irrigation.data=[["Status","Count"],["Irrigation On",j.irrigation_heater.irrigation.on],["Irrigation Off",j.irrigation_heater.irrigation.off]],j.ctrl.generate_chart_irrigation_heating(j.irrigation_heater.irrigation.data,j.irrigation_heater.heaters.data))},!0),a.$watch(function(){return e.allData.lanes},function(a,b){if(j.ambientLight={allData:[],data:[],lanes:angular.copy(a)},j.soilMoisture={allData:[],data:[],lanes:angular.copy(a)},typeof a!==b){var d=[["Zone","Ambient Light"]],e=[["Zone","Soil Moisture"]],f=a.map(function(a){return c(function(b){if("undefined"!=typeof a.zones){for(var c=0;c<a.zones.length;c++)d.push([a.LaneName+" "+a.zones[c].ZoneName,parseFloat(a.zones[c].ZoneAvgLight)]),e.push([a.LaneName+" "+a.zones[c].ZoneName,parseFloat(a.zones[c].ZoneAvgSM)]);d.push(["",null]),e.push(["",null])}b()})});c.all(f).then(function(){j.ambientLight.allData=angular.copy(d),j.soilMoisture.allData=angular.copy(e),j.ambientLight.data=d,j.soilMoisture.data=e,j.ctrl.generate_chart_ambient(j.ambientLight.data),j.ctrl.generate_chart_soil(j.soilMoisture.data)})}},!0),a.$watch(function(){return j.avgTemp.data},function(a,b){j.ctrl.generate_chart_temperature(a)},!0),a.$watch(function(){return j.avgHumidity.data},function(a,b){j.ctrl.generate_chart_humidity(a)},!0),b(function(){j.ctrl.generate_chart()})}]),angular.module("greenhouseuiApp").controller("ConfiguratorCtrl",["$scope","$rootScope","$timeout","$mdDialog","$route","$q","ApiService","GeneralService","$filter",function(a,b,c,d,e,f,g,h,i){var j=this;j._=_,j.angular=angular,j.checkPermission=h.checkPermission,j.ctrl={reset:function(){j.greenhouses=[],j.crop=null,j.selectedGreenhouse=0,j.selectedGreenhouseLanes=[],j.message="",j.greenhouseCount=1,j.laneCount=1,j.zoneCount=1,j.existed=!1},load:function(){g.getAllGreenHouses().then(function(a){a.length&&"undefined"!=typeof a[0]?(j.existed=!0,j.greenhouseCount=a.length,angular.forEach(a,function(a,c){var d={name:"Green House "+(c+1),id:a.GreenhouseID,running:"true"===a.Running,lanes:[]};j.greenhouses.push(d),g.getLaneOfGreenHouse(a.GreenhouseID).then(function(a){if(console.log(a),a=_.sortBy(a,["LaneName"]),a.length){j.laneCount=a.length,j.zoneCount=parseInt(a[0].ZoneInLane);var c=[];angular.forEach(a,function(a){var b={name:a.LaneName,zoneCount:j.zoneCount};d.lanes.push(b),c.push(g.getZoneOfLane(a.LaneID).then(function(a){console.log(a),a.length&&"undefined"!=typeof a[0]&&"undefined"!=typeof a[0].CropType&&(b.crop=a[0].CropType)},function(){console.log("error")}))}),f.all(c).then(function(){b.loadingSpinner=!1})}else b.loadingSpinner=!1})})):b.loadingSpinner=!1})},resetUI:function(){return i("simulationIsRunning")(j.greenhouses)?void h.simpleAlert("Stop simulation before reset"):(b.loadingSpinner=!1,void j.ctrl.reset())},generateGreenhouse:function(a,b,c){j.greenhouses=[];for(var d=0;a>d;d++){for(var e={name:"Green House "+(d+1),lanes:[]},f=0;b>f;f++)e.lanes.push({name:"Lane "+(f+1),zoneCount:c});j.greenhouses.push(e)}},addCrop:function(){var a=j.crop+" in "+j.greenhouses[j.selectedGreenhouse].name;angular.forEach(j.selectedGreenhouseLanes,function(b){var c=j.greenhouses[j.selectedGreenhouse].lanes[parseInt(b)];c.crop=j.crop,a+=", "+c.name}),j.message+=a+"\n";var b=$("#messageCrop");b.length&&b.scrollTop(b[0].scrollHeight-b.height()),j.selectedGreenhouse=0,j.selectedGreenhouseLanes=[]},startSimulation:function(){var a=j.greenhouses.map(function(a){return g.startSimulation(a.id)});f.all(a).then(function(){e.reload()},function(){e.reload()})},stopSimulation:function(){var a=j.greenhouses.map(function(a){return g.stopSimulation(a.id)});f.all(a).then(function(){e.reload()},function(){e.reload()})},removeCrop:function(a){a.crop=""},createNewGreenhouse:function(a){var c=d.confirm().textContent("Creating a new simulation will over-ride the current setting and remove the current simulation").targetEvent(a).ok("OK").cancel("Cancel");d.show(c).then(function(){b.loadingSpinner=!0;var a="<Query><DeleteAllModelsData/><CreateGreenhouse><Greenhouses>",c=j.greenhouses.map(function(b){return f(function(c,d){var e="<Greenhouse>";e+="<GreenHouseName>"+b.name+"</GreenHouseName>",e+="<Location><latitude>1</latitude><longitude>1</longitude></Location>",e+="<ZonesPerLane>"+j.zoneCount+"</ZonesPerLane>",e+="<NumberOfLanes>"+j.laneCount+"</NumberOfLanes>",e+="<Lanes>";for(var f=0;f<b.lanes.length;f++)e+="<Lane><LaneName>"+b.lanes[f].name+"</LaneName><CropType>"+("undefined"!=typeof b.lanes[f].crop?b.lanes[f].crop:"")+"</CropType></Lane>";e+="</Lanes>",e+="</Greenhouse>",a+=e,c()})});f.all(c).then(function(){a+="</Greenhouses></CreateGreenhouse></Query>",g.createGreenHouse(a).then(function(){e.reload()})})},function(){})}},c(function(){j.ctrl.reset(),j.ctrl.load()})}]),angular.module("greenhouseuiApp").filter("simulationIsRunning",function(){return function(a){var b=_.find(a,{running:!0});return"undefined"!=typeof b}}),angular.module("greenhouseuiApp").controller("DocsCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("greenhouseuiApp").directive("internalStatus",["$timeout","ApiService",function(a,b){return{templateUrl:"./scripts/directives/internalstatus/internalstatus.html",restrict:"E",scope:{defaultData:"="},link:function(c,d,e){window.inter=c,c.scale={},c.ctrl={generatePlantationChart:function(a){function b(){var b=google.visualization.arrayToDataTable(a),c={backgroundColor:"transparent",pieSliceBorderColor:"transparent",legend:"none",chartArea:{width:"90%",height:"90%"},pieSliceText:"label"},d=new google.visualization.PieChart(document.getElementById("plantationChart"));d.draw(b,c)}google.charts.setOnLoadCallback(b),$(window).on("resize",function(){$("#plantationChart").length&&google.charts.setOnLoadCallback(b)})},generateSensors:function(){"undefined"!=typeof c.defaultData.greenhouseId&&(b.getHeaterOfGreenhouse(c.defaultData.greenhouseId).then(function(a){c.heaters={on:0,off:0},angular.forEach(a[0],function(a){"ON"===a.OnOffState.toUpperCase()?c.heaters.on++:c.heaters.off++})}),b.getIrrigationOfGreenhouse(c.defaultData.greenhouseId).then(function(a){c.irrigation={on:0,off:0},angular.forEach(a[0],function(a){"ON"===a.OnOffState.toUpperCase()?c.irrigation.on++:c.irrigation.off++})}))}},c.$watch(function(){return c.defaultData},function(){a(function(){if("undefined"!=typeof c.defaultData){var a=[["Type","Count"]];if(angular.forEach(c.defaultData.plantation.types,function(b){a.push([b.name,b.count])}),c.ctrl.generatePlantationChart(a),c.ctrl.generateSensors(),c.defaultData.temperature){var b=CONFIG_CONSTANT.HEAT_MAP_SCALE.Temperature.min,d=CONFIG_CONSTANT.HEAT_MAP_SCALE.Temperature.max,e=(c.defaultData.temperature-b)/(d-b)*(CONFIG_CONSTANT.SENSOR_VECTOR.max-CONFIG_CONSTANT.SENSOR_VECTOR.min)+CONFIG_CONSTANT.SENSOR_VECTOR.min;c.scale.temperature=Math.max(Math.min(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),Math.min(Math.max(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),e))}if(c.defaultData.humidity){var b=CONFIG_CONSTANT.HEAT_MAP_SCALE.Humidity.min,d=CONFIG_CONSTANT.HEAT_MAP_SCALE.Humidity.max,e=(c.defaultData.humidity-b)/(d-b)*(CONFIG_CONSTANT.SENSOR_VECTOR.max-CONFIG_CONSTANT.SENSOR_VECTOR.min)+CONFIG_CONSTANT.SENSOR_VECTOR.min;c.scale.humidity=Math.max(Math.min(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),Math.min(Math.max(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),e))}if(c.defaultData.light){var b=CONFIG_CONSTANT.HEAT_MAP_SCALE["Average ambient light"].min,d=CONFIG_CONSTANT.HEAT_MAP_SCALE["Average ambient light"].max,e=(c.defaultData.light-b)/(d-b)*(CONFIG_CONSTANT.SENSOR_VECTOR.max-CONFIG_CONSTANT.SENSOR_VECTOR.min)+CONFIG_CONSTANT.SENSOR_VECTOR.min;c.scale.light=Math.max(Math.min(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),Math.min(Math.max(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),e))}if(c.defaultData.soilMoisture){var b=CONFIG_CONSTANT.HEAT_MAP_SCALE["Average soil moisture"].min,d=CONFIG_CONSTANT.HEAT_MAP_SCALE["Average soil moisture"].max,e=(c.defaultData.soilMoisture-b)/(d-b)*(CONFIG_CONSTANT.SENSOR_VECTOR.max-CONFIG_CONSTANT.SENSOR_VECTOR.min)+CONFIG_CONSTANT.SENSOR_VECTOR.min;c.scale.soilMoisture=Math.max(Math.min(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),Math.min(Math.max(CONFIG_CONSTANT.SENSOR_VECTOR.min,CONFIG_CONSTANT.SENSOR_VECTOR.max),e))}}})})}}}]),angular.module("greenhouseuiApp").directive("externalStatus",function(){return{templateUrl:"./scripts/directives/externalstatus/externalstatus.html",restrict:"E",scope:{defaultData:"="},link:function(a,b,c){}}}),angular.module("greenhouseuiApp").service("StatusService",function(){var a=this;a.generateInternalStatus=function(a){var b=[],c=[];return angular.forEach(a.lanes,function(a){b=b.concat(a.zones)}),angular.forEach(b,function(a){if("undefined"!=typeof a){var b=_.find(c,function(b){return b.name===a.CropType});"undefined"==typeof b?c.push({name:a.CropType,count:1}):b.count++}}),{greenhouseId:a.GreenhouseID,temperature:a.InternalEnv.Temperature,humidity:a.InternalEnv.Humidity,light:a.InternalEnv.Light,soilMoisture:a.InternalEnv.SoilMoisture,plantation:{zoneCount:a.ZoneCount,types:c}}},a.generateExternalStatus=function(a){return{greenhouseId:a.GreenhouseID,temperature:a.ExternalEnv.Temperature,humidity:a.ExternalEnv.Humidity,light:a.ExternalEnv.Light,wind:a.ExternalEnv.Wind,longitude:a.Location.longitude,latitude:a.Location.latitude}}}),angular.module("greenhouseuiApp").directive("deviceSensor",function(){return{templateUrl:"./scripts/directives/devicesensor/devicesensor.html",restrict:"E",scope:{defaultData:"="},link:function(a,b,c){}}}),angular.module("greenhouseuiApp").service("FlickrService",["$http",function(a){var b=this;b.findImageByTag=function(b){return a.get("https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key="+CONFIG_CONSTANT.FLICKR.key+"&text="+b.toLowerCase()+"&tags="+b.toLowerCase()+"&safe_search=1&content_type=1&sort=relevance&format=json&nojsoncallback=1").then(function(b){if(console.log(b),b.data.photos&&b.data.photos.photo.length){var c=b.data.photos.photo[Math.floor(5*Math.random())].id;return a.get("https://api.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key="+CONFIG_CONSTANT.FLICKR.key+"&photo_id="+c+"&format=json&nojsoncallback=1").then(function(a){console.log(a);var b=_.find(a.data.sizes.size,{label:"Medium"});return console.log(b),b.source})}return CONFIG_CONSTANT.DEFAULT_PLANT_IMAGE})}}]),angular.module("greenhouseuiApp").service("ChartService",function(){var a=this,b="#7d838e",c="#FF7E27";a.generateLineChart=function(a,d,e){function f(){var f=google.visualization.arrayToDataTable(d),g={curveType:"function",series:[{color:c}],backgroundColor:"transparent",hAxis:{textStyle:{color:b},baselineColor:"#fff",gridlineColor:"transparent"},vAxis:{textStyle:{color:b},baselineColor:b,gridlineColor:"#39404a"},legend:{position:"bottom",textStyle:{color:b}},chartArea:{width:"80%",height:"80%"}};if("undefined"!=typeof e)for(var h in e)g[h]=e[h];var i=new google.visualization.LineChart(document.getElementById(a));i.draw(f,g)}google.charts.setOnLoadCallback(f),$(window).on("resize",function(){$("#"+a).length&&google.charts.setOnLoadCallback(f)})},a.generatePieChart=function(a,c,d){function e(){var e=google.visualization.arrayToDataTable(c),f={backgroundColor:"transparent",legend:{position:"bottom",textStyle:{color:b}},chartArea:{width:"80%",height:"80%"}};if("undefined"!=typeof d)for(var g in d)f[g]=d[g];var h=new google.visualization.PieChart(document.getElementById(a));h.draw(e,f)}google.charts.setOnLoadCallback(e),$(window).on("resize",function(){$("#"+a).length&&google.charts.setOnLoadCallback(e)})},a.generateBarChart=function(a,d,e){function f(){var f=google.visualization.arrayToDataTable(d),g=new google.visualization.DataView(f);g.setColumns([0,1,{calc:"stringify",sourceColumn:1,type:"string",role:"annotation"}]);var h={series:[{color:c}],backgroundColor:"transparent",hAxis:{textStyle:{color:b},baselineColor:"#fff",gridlineColor:"transparent"},vAxis:{textStyle:{color:b},baselineColor:b,gridlineColor:"#39404a"},legend:{position:"bottom",textStyle:{color:b}},chartArea:{width:"80%",height:"80%"}};if("undefined"!=typeof e)for(var i in e)h[i]=e[i];var j=new google.visualization.BarChart(document.getElementById(a));j.draw(g,h)}google.charts.setOnLoadCallback(f),$(window).on("resize",function(){$("#"+a).length&&google.charts.setOnLoadCallback(f)})},a.generateColumnChart=function(a,d,e){function f(){var f=google.visualization.arrayToDataTable(d),g={series:[{color:c}],backgroundColor:"transparent",hAxis:{textStyle:{color:b},baselineColor:"#fff",gridlineColor:"transparent"},vAxis:{textStyle:{color:b},baselineColor:b,gridlineColor:"#39404a"},legend:{textStyle:{color:b}},chartArea:{bottom:70,height:"80%"}};if("undefined"!=typeof e)for(var h in e)g[h]=e[h];var i=new google.visualization.ColumnChart(document.getElementById(a));i.draw(f,g)}google.charts.setOnLoadCallback(f),$(window).on("resize",function(){$("#"+a).length&&google.charts.setOnLoadCallback(f)})}}),angular.module("greenhouseuiApp").service("TestService",["$q",function(a){var b=this;b.generateGraphData=function(){var b={},c=[];return angular.forEach(CONFIG_CONSTANT.HEAT_MAP_SCALE,function(d,e){c.push(a(function(a,c){b[e]=[];var f=new Date;f.setHours(0,0,0,0);var g=10;switch(e){case"Average ambient light":case"Average soil moisture":for(var h=0;3>h;h++)for(var i=0;3>i;i++){var j=Math.round(Math.random()*(d.max-d.min))+d.min;b[e].push(["Lane "+(h+1)+" Zone "+(i+1),j])}break;default:for(var h=0;g>h;h++){var k=0===h?d.min:b[e][h-1][1]-5,l=0===h?d.max:b[e][h-1][1]+5,j=Math.round(Math.random()*(l-k))+k;j<d.min&&(j=d.min),j>d.max&&(j=d.max),f.setHours(0,h,0,0),b[e].push([f.toUTCString(),j])}}"undefined"!=typeof d.reportTitle&&d.reportTitle&&b[e].unshift(d.reportTitle),a()}))}),c.push(a(function(a,c){var d=0,e=1e3;b.Energy=[];for(var f=0;24>f;f++){var g=0===f?d:b.Energy[f-1][1]-5,h=0===f?e:b.Energy[f-1][1]+5,i=Math.round(Math.random()*(h-g))+g;d>i&&(i=d),i>e&&(i=e),b.Energy.push([24-f+"",i])}b.Energy.unshift(["Hours","Energy"]),a()})),c.push(a(function(a,c){b.Heater=[["Status","Count"],["Heater On",Math.round(10*Math.random())+10],["Heater Off",Math.round(10*Math.random())+10]],b.Irrigation=[["Status","Count"],["Irrigation On",Math.round(10*Math.random())+10],["Irrigation Off",Math.round(10*Math.random())+10]],a()})),a.all(c).then(function(){return b})}}]),angular.module("greenhouseuiApp").service("SensorService",["$rootScope",function(a){window.serviceSensor=this,a.sensors={};var b=this;b.updateSensor=function(b,c){a.sensors[b]=c,a.sensors[b].onChange(c)},b.onUpdate=function(b,c){a.sensors[b].onChange(c),a.$digest()}}]),angular.module("greenhouseuiApp").run(["$templateCache",function(a){a.put("views/configurator.html",'<div class="configurator-wrapper"> <div class="landing-bg bg-3"></div> <div class="container-fluid"> <div class="row"> <div class="col-xs-12 action-bar text-center"> <md-button class="md-raised bg-color-blue" ng-click="!vm.checkPermission() || vm.ctrl.startSimulation()" ng-disabled="vm.greenhouses | simulationIsRunning"><i class="fa fa-play"></i>&nbsp;&nbsp;Start Simulation <span class="hint color-yellow">Admin only</span> </md-button> <md-button class="md-raised bg-color-red" ng-click="!vm.checkPermission() ||vm.ctrl.stopSimulation()" ng-disabled="!(vm.greenhouses | simulationIsRunning)"><i class="fa fa-ban"></i>&nbsp;&nbsp;Stop Simulation <span class="hint color-yellow">Admin only</span> </md-button> <a href="#/simulation"> <md-button class="md-raised bg-color-orange"><i class="fa fa-th"></i>&nbsp;&nbsp;Go to app</md-button> </a> </div> <div class="col-xs-12 text-center"> &nbsp; </div> <div class="col-xs-12 text-center"> <!--<p><b>There is no simulation running. Start by creating one</b></p>--> <!--<p><b>There is already a simulation created with the following configuration</b></p>--> <p><b>Summary configuration below</b></p> </div> </div> <br> <div class="row"> <div class="col-xs-12 col-sm-4" ng-if="!vm.greenhouses.length || !$root.user.hasPermission"> </div> <div class="col-xs-12 col-sm-4"> <div class="panel panel-configurator md-whiteframe-2dp"> <md-progress-circular class="md-warn" md-diameter="40" ng-show="$root.loadingSpinner"></md-progress-circular> <div class="panel-heading">Layout</div> <div class="panel-body"> <form name="createForm"> <md-input-container class="md-block"> <label>Number of greenhouses</label> <input required md-no-asterisk name="ghCount" type="number" ng-model="vm.greenhouseCount" min="1" max="5" ng-disabled="vm.greenhouses.length" onclick="this.select()"> <div ng-messages="createForm.ghCount.$error" multiple="multiple" md-auto-hide="false"> <div ng-message="required">This is required.</div> <div ng-message="min"> Lower than minimum! </div> <div ng-message="max"> Greater than maximum! </div> </div> <div class="hint text-right">Maximum 5</div> </md-input-container> <md-input-container class="md-block"> <label>Number of lanes in each greenhouse</label> <input required md-no-asterisk name="laneCount" type="number" min="1" max="6" ng-model="vm.laneCount" ng-disabled="vm.greenhouses.length" onclick="this.select()"> <div ng-messages="createForm.laneCount.$error" multiple="multiple" md-auto-hide="false"> <div ng-message="required">This is required.</div> <div ng-message="min"> Lower than minimum! </div> <div ng-message="max"> Greater than maximum! </div> </div> <div class="hint text-right">Maximum 6</div> </md-input-container> <md-input-container class="md-block"> <label>Number of zones in each lane</label> <input required md-no-asterisk name="zoneCount" type="number" min="1" max="10" ng-model="vm.zoneCount" ng-disabled="vm.greenhouses.length" onclick="this.select()"> <div ng-messages="createForm.zoneCount.$error" multiple="multiple" md-auto-hide="false"> <div ng-message="required">This is required.</div> <div ng-message="min"> Lower than minimum! </div> <div ng-message="max"> Greater than maximum! </div> </div> <div class="hint text-right">Maximum 10</div> </md-input-container> <md-button class="md-raised bg-color-green-2 pull-right" ng-click="!vm.checkPermission() || vm.ctrl.generateGreenhouse(vm.greenhouseCount,vm.laneCount,vm.zoneCount)" ng-show="!vm.greenhouses.length" ng-disabled="!vm.angular.equals(createForm.ghCount.$error,{})||!vm.angular.equals(createForm.laneCount.$error,{})||!vm.angular.equals(createForm.zoneCount.$error,{})">Continue&nbsp;&nbsp;<i class="fa fa-angle-double-right"></i> </md-button> </form> </div> <div class="icon-next" ng-if="vm.greenhouses.length && $root.user.hasPermission"></div> </div> </div> <div class="col-xs-12 col-sm-8" ng-if="vm.greenhouses.length && $root.user.hasPermission"> <div class="panel panel-configurator md-whiteframe-2dp"> <md-progress-circular class="md-warn" md-diameter="40" ng-show="$root.loadingSpinner"></md-progress-circular> <div class="panel-heading">Crops</div> <div class="panel-body"> <h5>Add new crop</h5> <form name="addForm"> <div class="panel panel-configurator"> <div class="panel-body"> <div layout-gt-sm="row"> <md-input-container class="md-block" flex-gt-sm> <label>Crop Name</label> <input required md-no-asterisk name="crop" ng-model="vm.crop" select-on-click> <md-icon>&nbsp;&nbsp;&nbsp;in</md-icon> <div ng-messages="addForm.crop.$error" md-auto-hide="false"> <div ng-message="required">This is required.</div> </div> </md-input-container> </div> <div layout-gt-sm="row"> <md-input-container class="md-block" flex-gt-sm> <label>Select greenhouse</label> <md-select ng-model="vm.selectedGreenhouse"> <md-option value="{{$index}}" ng-repeat="greenhouse in vm.greenhouses"> {{greenhouse.name}} </md-option> </md-select> </md-input-container> <md-input-container class="md-block" flex-gt-sm> <label>Select multi lanes</label> <md-select name="lanes" ng-model="vm.selectedGreenhouseLanes" multiple="true" required> <md-option value="{{$index}}" ng-repeat="lane in vm.greenhouses[vm.selectedGreenhouse].lanes" ng-hide="lane.crop"> {{lane.name}} </md-option> </md-select> <div class="errors" ng-messages="addForm.lanes.$error" md-auto-hide="false"> <div ng-message="required">This is required.</div> </div> </md-input-container> </div> <md-button class="md-raised bg-color-green-2 pull-right" ng-click="vm.ctrl.addCrop()" ng-disabled="!vm.angular.equals(addForm.crop.$error,{})||!vm.angular.equals(addForm.lanes.$error,{})"><i class="fa fa-plus"></i>&nbsp;&nbsp;Add </md-button> </div> </div> </form> <br> <h4>Crops added</h4> <md-input-container class="md-block" ng-repeat="gh in vm.greenhouses"> <h5 class="color-blue-2">{{gh.name}}</h5> <md-chips ng-model="gh.lanes" name="fruitName" readonly="true"> <md-chip-template> <strong>{{$chip.name}}</strong> <em>({{$chip.crop}})</em> <button class="_md-chip-remove ng-scope" ng-click="vm.ctrl.removeCrop($chip)" type="button" aria-hidden="true" tabindex="-1"> <md-icon md-svg-icon="md-close" aria-hidden="true"> <svg version="1.1" x="0px" y="0px" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fit="" height="100%" width="100%" preserveaspectratio="xMidYMid meet" focusable="false"> <g> <path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"></path> </g> </svg> </md-icon> <span class="_md-visually-hidden ng-binding"> Remove </span></button> </md-chip-template> </md-chips> </md-input-container> </div> </div> <md-button class="md-raised bg-color-red pull-right" ng-click="!vm.checkPermission() ||vm.ctrl.createNewGreenhouse()" ng-disabled="vm.existed">Finish </md-button> <md-button class="md-raised bg-color-grey pull-right" ng-click="vm.ctrl.resetUI()" ng-show="vm.greenhouses.length"><i class="fa fa-refresh"></i>&nbsp;&nbsp;Reset </md-button> </div> </div> </div> </div>'),a.put("views/docs.html",'<div class="docs-wrapper"> <br> <div class="row"> <div class="col-xs-12 text-center"><h5>For documentation on the Smart Greenhouse applications, see <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/The+Greenhouse+Tutorials" target="_blank">TQL Docs</a>. </h5> </div> </div> <br> <div class="container"> <md-grid-list md-cols-xs="1" md-cols-sm="4" md-cols-md="6" md-cols-gt-md="6" md-row-height-gt-md="1:1" md-row-height="2:2" md-gutter="12px" md-gutter-gt-sm="8px"> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/1.+Serial+Temperature+Sensor" target="_blank"> <img src="template/images/docs-logo.png" alt=""></a> <md-grid-tile-footer> <h3>Serial Temperature Sensor</h3> </md-grid-tile-footer> </md-grid-tile> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/pages/viewpage.action?pageId=1179864" target="_blank"> <img src="template/images/multi-sensor.png" alt=""></a> <md-grid-tile-footer> <h3>Multiple Sensors</h3> </md-grid-tile-footer> </md-grid-tile> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/3.+Phidget+Servo+Motor+Actuator" target="_blank"> <img src="template/images/docs-logo.png" alt=""></a> <md-grid-tile-footer> <h3>Phidget Servo Motor Actuator</h3> </md-grid-tile-footer> </md-grid-tile> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/4.+Irrigation+nozzle+with+flow+control+actuator" target="_blank"> <img src="template/images/flowcontrol.png" alt=""></a> <md-grid-tile-footer> <h3>Irrigation nozzle with flow control actuator</h3> </md-grid-tile-footer> </md-grid-tile> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/5.+USB+camera" target="_blank"> <img src="template/images/usbcam-pi.png" alt=""></a> <md-grid-tile-footer> <h3>Camera</h3> </md-grid-tile-footer> </md-grid-tile> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/6.+Other+IP+based+devices+-+light" target="_blank"> <img src="template/images/PhilipHue.png" alt=""></a> <md-grid-tile-footer> <h3>Other IP based devices - light</h3> </md-grid-tile-footer> </md-grid-tile> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/7.+Weather+cloud+service" target="_blank"> <img src="template/images/docs-logo.png" alt=""></a> <md-grid-tile-footer> <h3>Weather cloud service</h3> </md-grid-tile-footer> </md-grid-tile> <md-grid-tile class="gray" md-rowspan="2" md-colspan="2" md-colspan-sm="2" md-colspan-xs="1" md-rowspan-xs="1"> <a href="https://atomiton.atlassian.net/wiki/display/TQLDocs/9.+Combining+Things+With+Data" target="_blank"> <img src="template/images/docs-logo.png" alt=""></a> <md-grid-tile-footer> <h3>Combining Things With Data</h3> </md-grid-tile-footer> </md-grid-tile> </md-grid-list> </div> </div>'),a.put("views/greenhouse.html",'<div class="panel-wrapper-2"> <div class="landing-bg bg-2"></div> <div class="row"> <div class="col-xs-12 col-sm-3 left-list"> <internal-status default-data="vm.internal"></internal-status> </div> <div class="col-xs-12 col-sm-9 heat-group nopadding"> <div id="panel-full-height" class="panel md-whiteframe-5dp panel-camera"> <md-progress-circular class="md-warn" md-diameter="40" ng-show="$root.loadingSpinner"></md-progress-circular> <div class="panel-heading"> <external-status default-data="vm.external"></external-status> <div class="heat-scale"> <table> <tr> <td class="color-heat-bg-{{$index+1}}" ng-repeat="heat in vm.heatCount track by $index"></td> </tr> <tr> <td class="text-right" ng-repeat="scale in vm.scale_groups[vm.selectedHeatMap].data track by $index"> <span class="pull-left" ng-if="$index === 0">&nbsp;&nbsp;{{vm.selectedHeatMap}} Legend</span> {{scale}} {{vm.scale_groups[vm.selectedHeatMap].unit}} </td> </tr> </table> </div> </div> <div class="panel-body heat-group"> <div class="panel panel-heat-map"> <div class="panel-heading"> <span>Heat map &nbsp;&nbsp;</span> <select class="selectpicker" title="Select" ng-model="vm.selectedHeatMap"> <option ng-repeat="(key,value) in vm.scale_groups track by $index" value="{{key}}" ng-selected="{{vm.selectedHeatMap == key}}"> {{key}} </option> </select> <!--<select class="selectpicker" title="Filters">--> <!--<option>01</option>--> <!--<option>02</option>--> <!--<option>03</option>--> <!--</select>--> <div class="compass pull-right"> <div class="icon-compass"></div> </div> </div> <div class="panel-body nopadding"> <ul class="lane-title list-unstyled"> <li ng-repeat="lane in $root.allData.lanes"> <div title="{{lane.LaneName}}">{{(lane.LaneName)||\'N/A\'}}</div> </li> </ul> <div class="heat-map-grid-wrapper"> <ul class="list-inline heat-map-grid" ng-repeat="lane in $root.allData.lanes"> <li class="grid color-heat-bg-{{zone.backgroundCode}}" ng-repeat="zone in lane.zones" ng-click="vm.ctrl.goToGreenHouse(lane, zone)" ng-mouseenter="vm.ctrl.reloadZone(lane.zones,$index)"> <span class="title text-center" title="{{zone.CropType}}">{{(zone.CropType)||\'N/A\'}}</span> <span class="count" ng-if="vm.selectedHeatMap === \'VPD\'">{{(zone.VPD| number: 1)||\'N/A\'}}</span> <span class="count" ng-if="vm.selectedHeatMap === \'Temperature\'">{{(zone.ZoneTemperature| number: 1)||\'N/A\'}} &#8451;</span> <span class="count" ng-if="vm.selectedHeatMap === \'Humidity\'">{{(zone.ZoneHumidity| number: 1)||\'N/A\'}} %</span> <span class="count" ng-if="vm.selectedHeatMap === \'Average soil moisture\'">{{(zone.ZoneAvgSM| number: 1)||\'N/A\'}} cb</span> <span class="count" ng-if="vm.selectedHeatMap === \'Average ambient light\'">{{(zone.ZoneAvgLight| number: 1)||\'N/A\'}} lux</span> <i class="icon-grid-water" ng-class="{\'o-half\': (zone.Irrigation.OnOffState | uppercase) !== \'ON\'}"> <md-tooltip> Irrigation </md-tooltip> </i> <i class="icon-heater" ng-class="{\'o-half\': (zone.Heater.OnOffState | uppercase) !== \'ON\'}"> <md-tooltip> Heater </md-tooltip> </i> <div class="details md-whiteframe-5dp" ng-class="{\'right\': $index !== 0 && $index === (lane.zones.length-1)}"> <ul class="list-unstyled"> <li class="head">{{zone.ZoneName||\'N/A\'}}</li> <!--<li class="head">{{zone.ZoneID||\'N/A\'}}</li>--> <li><span class="name">Temp:</span> {{(zone.ZoneTemperature | number: 3)||\'N/A\'}} &#8451;</li> <li><span class="name">Humidity:</span> {{(zone.ZoneHumidity| number: 3)||\'N/A\'}} %</li> <li><span class="name">VPD:</span> {{(zone.VPD| number: 1)||\'N/A\'}}</li> <li><span class="name">Heater:</span> {{(zone.sensors.heater.OnOffState)||\'N/A\'}}</li> <li><span class="name">Avg. SM:</span> {{(zone.ZoneAvgSM| number: 1)||\'N/A\'}} cb</li> <li><span class="name">Avg. AL:</span> {{(zone.ZoneAvgLight| number: 1)||\'N/A\'}} lux</li> </ul> <span class="caret"></span> </div> </li> </ul> </div> <!--<ul class="list-inline heat-map-grid"  ng-init="">--> <!--<li class="grid color-heat-bg-{{$index+1}}" ng-repeat="heat in $heatCount track by $index">--> <!--<span class="title" title="Special Zone adadaadf ada">Special Zone</span>--> <!--<span class="count">759</span>--> <!--<div class="details md-whiteframe-2dp">--> <!--<ul class="list-unstyled">--> <!--<li class="head">Zone 13</li>--> <!--<li><span class="name">Temp:</span> 27 &#8451;</li>--> <!--<li><span class="name">Humidity:</span> 66%</li>--> <!--<li><span class="name">VPD:</span> 747</li>--> <!--<li><span class="name">Heater:</span> onZone 13</li>--> <!--</ul>--> <!--<span class="caret"></span>--> <!--</div>--> <!--</li>--> <!--<li class="grid color-heat-bg-{{$index+1}}" ng-repeat="heat in $heatCount track by $index"></li>--> <!--<li class="grid color-heat-bg-{{$index+1}}" ng-repeat="heat in $heatCount track by $index"></li>--> <!--</ul>--> </div> </div> </div> </div> </div> </div> </div>'),
a.put("views/home.html",'<div class="landing-bg bg-3"></div> <div class="container"> <div class="row home"> <div class="col-xs-12 col-md-6 left-list"> <div class="row"> <div class="col-xs-12 text-center-not-md text-center-not-lg"><h4>WHY SIMULATION?</h4></div> <div class="col-xs-12 col-md-4"><img src="template/images/landing_heroe_1.png" class="img-responsive" alt=""> <br> </div> <div class="col-xs-12 col-md-8"> <p>Simulation is one of the cornerstones of IoT development. IoT applications are tested at scale on simulated systems before they are rolled out to the field. Unlike in traditional application development, data and users (people) are not enough to test IoT applications. You need interactive things (sensors, actuators), often in large numbers, and the physical environment (the field, the weather) against which to run your applications.</p> <p>Simulation is a structured way to create systems that can scale up and scale down in your environment, that can exhibit behaviors you would expect to see in the real physical world, either as norm, or as exceptions.</p> </div> </div> <div class="row"> <div class="col-xs-12 text-center-not-md text-center-not-lg"><h4>HOW DOES IT WORK?</h4></div> <div class="col-xs-12 col-md-4"><img src="template/images/landing_heroe_2.png" class="img-responsive" alt=""> <br> </div> <div class="col-xs-12 col-md-8"> This Greenhouse Simulator will let you configure greenhouses. <ol> <li>Go to the “Configurator” tab from the top of this page.</li> <li>Enter the lay out configuration (how many greenhouses, how many lanes and zones. “Create” the greenhouses. </li> <li>Add the types of crops for each lane in the greenhouse.</li> <li>After you configure, click “Start Simulation”. The simulation will be started</li> <li>You can now “Go to app” to see the Smart Greenhouse application running on your simulation. </li> </ol> </div> </div> <div class="row"> <div class="col-xs-12 text-center-not-md text-center-not-lg"><h4>THE GREENHOUSE SET UP</h4></div> <div class="col-xs-12 col-md-4"><img src="template/images/landing_heroe_3.png" class="img-responsive" alt=""> <br> </div> <div class="col-xs-12 col-md-8"> <p>Each greenhouse has crops in multiple lanes. Each lane consists of multiple zones, linearly aligned. The number of lanes and zones are configurable in the Configurator. Each zone is sub-divided into 9 grids (3x3). Each grid is 3.33 feet wide and 3.33 feet long.</p> <div class="row"> <div class="col-xs-12 col-sm-6"> In each zone, there are:<br> 1 temperature sensor<br> 1 humidity sensor<br> 1 camera<br> 1 heater<br> 1 irrigation motor<br><br> </div> <div class="col-xs-12 col-sm-6"> In each grid, there are:<br> 1 ambient light sensor<br> 1 soil moisture sensor<br> 1 light<br> 1 irrigation nozzle<br><br> </div> </div> <small>Note: one of the zones will be attached with some real devices (i.e. sensors and actuators sitting in Atomiton Lab). The rest of the devices are simulated. </small> </div> </div> </div> <div class="col-xs-12 col-md-6"> <img src="template/images/landing_map.png" class="img-responsive" alt=""> </div> </div> </div>'),a.put("views/p2.html",'<div class="panel-wrapper-1"> <div class="landing-bg bg-1"></div> <div class="row"> <div class="left-list col-xs-12 col-sm-12 col-md-4 col-lg-3"> <div class="row left-list-heading"> <div class="col-xs-12 col-sm-4 text-center-xs"> <div class="title">Zone 3</div> </div> <div class="col-xs-12 col-sm-8"> <div class="panel md-whiteframe-5dp text-center-xs"> <img src="images/icons/icon_geo_big.372c1cab.png" alt=""> 43&deg;66\'06" - 75&deg;45\'52" </div> </div> </div> <div class="panel md-whiteframe-5dp"> <div class="panel-heading"> <div class="row heading"> <div class="col-xs-12"> <div class="image-wrapper"> <div class="image-background"><img src="template/images/garden1.jpg" alt=""></div> </div> <div class="details-name"> <div class="title">Trucks da</div> <div>233568635565989</div> </div> </div> </div> </div> <div class="panel-body"> <div class="row"> <div class="col-xs-12"> <div class="details-location"> <img src="images/icons/icon_geo_small.69ddd2f1.png" alt="">Solanum lycopersicum </div> <ul class="list-unstyled"> <li> <span class="title">Seeding date:</span> Mar 24th, 2015 </li> <li> <span class="title"># of plants</span> 25 </li> <li> <span class="title">Last fertilisation</span> Jun 28th, 2015 </li> <li> <span class="title">Havesting season:</span> August, 2015 </li> </ul> </div> </div> </div> </div> <div class="panel md-whiteframe-5dp"> <div class="panel-heading"> <div class="heading"> <!--<div class="col-xs-12">--> <div class="image-wrapper"> <div class="image-background"><img src="template/images/garden1.jpg" alt=""></div> </div> <div class="details-name"> <div class="title">VPD</div> <div class="name"><img src="images/icons/icon_geo_small.69ddd2f1.png" alt="">Saratoga Springs</div> </div> <div class="icon-collapse"> <div>+</div> </div> <!--</div>--> </div> </div> </div> </div> <div class="middle-list col-xs-12 col-sm-12 col-md-4 col-lg-6"> <div class="panel md-whiteframe-5dp"> <div class="panel-heading"> <ul class="list-inline nomargin"> <li>VPD</li> <li>CURRENT: 685</li> <li>MAX: 750</li> <li>MIN: 750</li> <li>LAST 24 HOURS</li> </ul> </div> <div class="panel-body"> </div> </div> </div> <div class="right-list col-xs-12 col-sm-12 col-md-4 col-lg-3"> <div class="panel md-whiteframe-5dp"> <div class="panel-heading"> DEVICES <div class="icon-collapse inverse"> <div>+</div> </div> </div> </div> <div class="panel md-whiteframe-5dp heater_control"> <div class="panel-body"> <i class="icon-heater-control"></i> <rzslider rz-slider-model="vm.slider.value" rz-slider-options="vm.slider.options"></rzslider> <div class="title">Heater control</div> <a href=""><i class="icon-power"></i></a> </div> </div> </div> </div> </div>'),a.put("views/reports.html",'<div class="panel-wrapper-1"> <div class="landing-bg bg-1"></div> <div class="row"> <div class="col-xs-12 col-md-6 col-lg-4"> <div class="panel panel-report md-whiteframe-5dp"> <div class="panel-heading text-center"> Average temperature, last hour </div> <div class="panel-body"> <div id="chart_temperature" style="width: 100%; height: 300px"></div> </div> </div> </div> <div class="col-xs-12 col-md-6 col-lg-4"> <div class="panel panel-report md-whiteframe-5dp"> <div class="panel-heading text-center"> Average humidity, last hour </div> <div class="panel-body"> <div id="chart_humidity" style="width: 100%; height: 300px"></div> </div> </div> </div> <div class="col-xs-12 col-md-6 col-lg-4"> <div class="panel panel-report md-whiteframe-5dp"> <div class="panel-heading text-center"> Energy usage per hour, last 24 hours </div> <div class="panel-body"> <div id="chart_energy" style="width: 100%; height: 300px"></div> </div> </div> </div> <!--</div>--> <!--<div class="row">--> <div class="col-xs-12 col-md-6 col-lg-4"> <div class="panel panel-report md-whiteframe-5dp"> <div class="panel-heading text-center"> Heating Systems </div> <div class="panel-body"> <div id="chart_heater" style="width: 100%; height: 300px"></div> </div> </div> </div> <div class="col-xs-12 col-md-6 col-lg-4"> <div class="panel panel-report md-whiteframe-5dp"> <div class="panel-heading text-center"> Irrigation Systems </div> <div class="panel-body"> <div id="chart_irrigation" style="width: 100%; height: 300px"></div> </div> </div> </div> <div class="col-xs-12"> <div class="panel panel-report md-whiteframe-5dp"> <div class="panel-heading text-center"> Ambient Light by zones </div> <div class="panel-body"> <div class="filter-group text-center"> <md-checkbox ng-init="cbAmbient[$index] = true" ng-model="cbAmbient[$index]" ng-change="vm.fn.changeLane_ambient(lane)" class="md-raised md-primary" aria-label="Checkbox 1" ng-repeat="lane in $root.allData.lanes track by $index"> {{lane.LaneName}} </md-checkbox> </div> <div id="chart_ambient" style="width: 100%; height: 300px"></div> </div> </div> </div> <div class="col-xs-12"> <div class="panel panel-report md-whiteframe-5dp"> <div class="panel-heading text-center"> Average soil moisture by zone </div> <div class="panel-body"> <div class="filter-group text-center"> <md-checkbox ng-init="cbSoil[$index] = true" ng-model="cbSoil[$index]" ng-change="vm.fn.changeLane_soil(lane)" class="md-raised md-primary" aria-label="Checkbox 1" ng-repeat="lane in $root.allData.lanes track by $index"> {{lane.LaneName}} </md-checkbox> </div> <div id="chart_soil" style="width: 100%; height: 300px"></div> </div> </div> </div> </div> </div>'),a.put("views/simulation.html",'<div class="panel-wrapper-2"> <div class="landing-bg bg-2"></div> <div class="row"> <div class="col-xs-12 col-sm-3 left-list"> <internal-status default-data="vm.internal"></internal-status> </div> <div class="col-xs-12 col-sm-9 nopadding"> <div id="panel-full-height" class="panel md-whiteframe-5dp panel-camera"> <div class="panel-heading"> <external-status default-data="vm.external"></external-status> </div> <div class="panel-body"> <a href="javascript:void(0)" ng-click="vm.goToGreenHouse()"><img class="img-responsive" src="template/images/camera_sample.jpg" alt=""></a> </div> </div> </div> </div> </div>'),a.put("views/zones.html",'<div class="panel-wrapper-1"> <div class="landing-bg bg-1"> <img ng-src="{{vm.zone.imageUrl}}" alt=""> </div> <div class="row"> <div class="left-list col-xs-12 col-sm-12 col-md-4 col-lg-3"> <div class="row left-list-heading"> <div class="col-xs-12 col-sm-4 text-center-xs"> <div class="title" ng-bind="vm.zone.name"></div> </div> <div class="col-xs-12 col-sm-8"> <div class="panel md-whiteframe-5dp text-center-xs"> <img src="images/icons/icon_geo_big.372c1cab.png" alt=""> <!--43&deg;66\'06" - 75&deg;45\'52"--> Lng {{(vm.zone.location.longitude|number:5) || \'N/A\'}} - Lat {{(vm.zone.location.latitude|number:5) || \'N/A\'}} </div> </div> </div> <div id="panelGroup"> <div class="panel md-whiteframe-5dp" ng-repeat="group in vm.zone.devices.groups"> <div class="panel-heading"> <div class="heading"> <div class="image-wrapper"> <div class="image-background"><img src="template/images/garden1.jpg" alt=""></div> </div> <div class="details-name"> <div class="title">{{group.name}}</div> <div ng-show="!group.isCollapsed">{{group.title}}</div> <div class="name" ng-show="group.isCollapsed"> <img src="images/icons/icon_geo_small.69ddd2f1.png" alt="">{{group.location||\'N/A\'}} </div> </div> <div class="icon-collapse text-right" ng-show="group.isCollapsed"> <md-button class="md-fab md-mini" aria-label="trigger collapse" data-toggle="collapse" data-parent="#panelGroup" data-target="#groupCollapse{{$index}}" ng-click="vm.ctrl.collapseDeviceGroup(group)"> <!--{{group.isCollapsed?\'+\':\'-\'}}--> + </md-button> </div> </div> </div> <div class="collapse" id="groupCollapse{{$index}}"> <div class="panel-body"> <div class="row"> <div class="col-xs-12"> <div class="details-location"> <img src="images/icons/icon_geo_small.69ddd2f1.png" alt="">{{group.location||\'N/A\'}} </div> <ul class="list-unstyled"> <li ng-repeat="item in group.data"> <span class="title">{{item.name}}:</span> {{item.description||(item.description === 0?0:\'N/A\')}} </li> </ul> </div> </div> </div> </div> </div> </div> </div> <div class="middle-list col-xs-12 col-sm-12 col-md-4 col-lg-6"> <div class="wrapper-3d hidden-xs" ng-show="!vm.zone.devices.groups[2].isCollapsed || !vm.zone.devices.groups[3].isCollapsed"> <article class="viewport"> <section class="cube"> <div> <div class="panel panel-grid" ng-show="!vm.zone.devices.groups[2].isCollapsed"> <div class="panel-body"> <div class="grid-group"> <div class="col-xs-12 col-sm-4 nopadding" ng-repeat="grid in vm.grids"> <div class="grid md-whiteframe-2dp"> <div class="grid-bar"> <div class="col-xs-6 nopadding"> <!--<i class="icon-grid-light"></i> {{grid.AmbientLight}}--> <div class="droplet light"> <i class="icon-grid-light"></i> <span class="count">{{grid.AmbientLight}}</span> <svg width="50%" viewbox="0 0 30 42"> <path d="M15 3\r\n                         Q16.5 6.8 25 18\r\n                         A12.8 12.8 0 1 1 5 18\r\n                         Q13.5 6.8 15 3z"> </svg> </div> </div> <div class="col-xs-6 nopadding"> <div class="droplet humidity"> <i class="icon-grid-humidity" ng-class="{\'o-half\': (grid.sensors.light.OnOffState | uppercase) !== \'ON\'}"></i> <svg width="50%" viewbox="0 0 30 42"> <path d="M15 3\r\n                         Q16.5 6.8 25 18\r\n                         A12.8 12.8 0 1 1 5 18\r\n                         Q13.5 6.8 15 3z"> </svg> </div> </div> </div> </div> </div> </div> </div> </div> <div class="panel panel-grid" ng-show="!vm.zone.devices.groups[3].isCollapsed"> <div class="panel-body"> <div class="grid-group"> <div class="col-xs-12 col-sm-4 nopadding" ng-repeat="grid in vm.grids"> <div class="grid md-whiteframe-2dp"> <div class="grid-bar"> <div class="col-xs-6 nopadding"> <div class="droplet light"> <i class="icon-soil"></i> <span class="count">{{grid.SoilMoisture}}</span> <svg width="50%" viewbox="0 0 30 42"> <path d="M15 3\r\n                         Q16.5 6.8 25 18\r\n                         A12.8 12.8 0 1 1 5 18\r\n                         Q13.5 6.8 15 3z"> </svg> </div> </div> <div class="col-xs-6 nopadding"> <div class="droplet humidity"> <i class="icon-grid-water" ng-class="{\'o-half\': (vm.zone.devices.groups[3].status | uppercase) !== \'ON\'}"></i> <svg width="50%" viewbox="0 0 30 42"> <path d="M15 3\r\n                         Q16.5 6.8 25 18\r\n                         A12.8 12.8 0 1 1 5 18\r\n                         Q13.5 6.8 15 3z"> </svg> </div> </div> </div> </div> </div> </div> </div> </div> </div> <div class="small"> </div> <div class="small"> </div> <div class="small"> </div> <div class="small"> </div> <div> </div> </section> </article> </div> <div class="panel md-whiteframe-5dp" ng-show="!vm.zone.devices.groups[1].isCollapsed"> <div class="panel-heading"> <ul class="list-inline nomargin"> <li>VPD</li> <li>CURRENT: 685</li> <li>MAX: 750</li> <li>MIN: 750</li> <li>LAST 24 HOURS</li> </ul> </div> <div class="panel-body"> <div id="chart_lines" style="width: 100%; height: 500px"></div> </div> </div> <div class="panel panel-grid visible-xs" ng-show="!vm.zone.devices.groups[2].isCollapsed"> <div class="panel-body"> <div class="grid-group"> <div class="col-xs-12 col-sm-4 nopadding" ng-repeat="grid in vm.grids"> <div class="grid md-whiteframe-2dp"> <div class="grid-bar"> <di class="col-xs-6 nopadding"><i class="icon-grid-light"></i> {{grid.AmbientLight}}</di> <di class="col-xs-6 nopadding"><i class="icon-grid-humidity" ng-class="{\'o-half\': (grid.sensors.light.OnOffState | uppercase) !== \'ON\'}"></i> </di> </div> </div> </div> </div> </div> </div> <div class="panel panel-grid visible-xs" ng-show="!vm.zone.devices.groups[3].isCollapsed"> <div class="panel-body"> <div class="grid-group"> <div class="col-xs-12 col-sm-4 nopadding" ng-repeat="grid in vm.grids"> <div class="grid md-whiteframe-2dp"> <div class="grid-bar"> <di class="col-xs-6 nopadding"><i class="icon-grid-light"> </i> {{grid.SoilMoisture}} </di> <di class="col-xs-6 nopadding"><i class="icon-grid-water" ng-class="{\'o-half\': (vm.zone.devices.groups[3].status | uppercase) !== \'ON\'}"></i> </di> </div> </div> </div> </div> </div> </div> </div> <div class="right-list col-xs-12 col-sm-12 col-md-4 col-lg-3" ng-init="$deviceListCollapse = false"> <div class="panel md-whiteframe-5dp"> <device-sensor default-data="$root.sensorListOfZone"></device-sensor> </div> <div class="panel md-whiteframe-5dp camera-screen-small" ng-show="!vm.zone.devices.groups[0].isCollapsed"> <div class="panel-body"> <div class="text"><b>Last camera image</b></div> <div class="time">time stamp</div> <div class="icon-camera-sensor"> </div> </div> </div> <div class="panel md-whiteframe-5dp heater_control" ng-show="!vm.zone.devices.groups[1].isCollapsed"> <div class="panel-body"> <i class="icon-heater-control"></i> <rzslider rz-slider-model="vm.slider.value" rz-slider-options="vm.slider.options"></rzslider> <div class="title">Heater control</div> <a href="" ng-class="{\'o-half\': (vm.zone.devices.groups[1].data[2].description | uppercase) !== \'ON\'}" ng-click="vm.ctrl.controlHeater(true)"><i class="icon-power"> <md-tooltip md-direction="bottom"> Turn {{(vm.zone.devices.groups[1].data[2].description | uppercase) !== \'ON\'?\'On\':\'Off\'}} </md-tooltip> </i> </a> </div> </div> <div class="panel md-whiteframe-5dp heater_control" ng-show="!vm.zone.devices.groups[3].isCollapsed"> <div class="panel-body"> <i class="icon-irrigation-control"></i> <!--<rzslider rz-slider-model="vm.slider.value" rz-slider-options="vm.slider.options"></rzslider>--> <div class="title">Irrigation control</div> <a href="" ng-class="{\'o-half\': (vm.zone.devices.groups[3].status | uppercase) !== \'ON\'}" ng-click="vm.ctrl.controlIrrigation(true)"><i class="icon-power"> <md-tooltip md-direction="bottom"> Turn {{(vm.zone.devices.groups[3].status | uppercase) !== \'ON\'?\'On\':\'Off\'}} </md-tooltip> </i></a> </div> </div> </div> </div> </div>')}]);